# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  # pull_request:
  create:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag:
        description: "test"
        required: true
  #   # Inputs the workflow accepts.
  #   inputs:
  #     name:
  #       # Friendly description to be shown in the UI instead of 'name'
  #       description: 'Person to greet'
  #       # Default value if no value is explicitly provided
  #       default: 'World'
  #       # Input has to be provided for the workflow to run
  #       required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  nes1:
    runs-on: ubuntu-latest
    steps:
      - name: nes1
        run: |
          echo nes1

  nes2:
    runs-on: ubuntu-latest
    steps:
      - name: nes2
        run: |
          echo nes2

  greet:
    # The type of runner that the job will run on
    needs: [nes1, nes2]
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        persist-credentials: true
        fetch-depth: 0

    - name: Send greeting
      run: |

        echo ${{ secrets.GITHUB_TOKEN }}
        echo ${{ secrets.GITHUB_TOKEN }}

        echo "GITHUB_REF=${GITHUB_REF}"
        echo base_ref:${{ github.base_ref }}
        echo ref:${{ github.ref }}
        echo head_ref:${{ github.head_ref }}
        echo ${{ github.token }}
        date >> test.1
        ls

        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git checkout -b "v2" #version tag
        git add test.*
        git status
        git commit -m "Commit stuff"
        git push origin v2 --force #

    - name: pull-request-action
      uses: vsoch/pull-request-action@1.0.12
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PULL_REQUEST_FROM_BRANCH: "v2"
        PULL_REQUEST_BRANCH: "main"
    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     branch: ${{ github.ref }}
    #     # git status
    #     # git add .
    #     # git commit -m "autoone"
    #     # git push



  # ghcr:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

#      -
#        name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ secrets.REGISTRY_USERNAME }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#
#      - name: Push operator to GitHub Container Registry
#        uses: docker/build-push-action@v1
#        with:
#          username: ${{ secrets.REGISTRY_USERNAME }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#          registry: ${{ secrets.REGISTRY }}
#          repository: ${{ secrets.REGISTRY_REPO }}
#          tags: "v1"

#      - name: Build and Push image to GitHub registry
#        run: |
#          tag=$(echo "$GITHUB_REF" | awk -F'/' '{print $3}')
#          appname=dev-test
#          image="${INPUT_REGISTRY}/${{ github.repository }}/${appname}:${tag}"
#
#          echo "${INPUT_REGISTRY_PASSWORD}" | docker login ${INPUT_REGISTRY} -u ${INPUT_REGISTRY_USERNAME} --password-stdin
#          docker build -t "${image}" .
#          docker push "${image}"
#        with:
#          REGISTRY: ${{ secrets.REGISTRY }}
#          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
#          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}


  # build:
  #   name: Push to GitHub Registry
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Check out code
  #       uses: actions/checkout@v2.3.1

  #     - name: Push Atlas-operator to Local Registry
  #       id: registry
  #       run: |
  #         image="localhost:5000/dev-test2:latest"
  #         docker run -d -p 5000:5000 --name registry registry:2
  #         docker build -t "${image}" .
  #         docker push "${image}"
  #         echo "::set-output name=image::$image"
  #         docker images | grep dev-test2