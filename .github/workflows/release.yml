# GitHub workflow for package configurations, build image and push to repo

name: Release workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag:"
        required: true

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.32

          # Optional: working directory, useful for monorepos
          # working-directory:

          args: --timeout 10m
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run ShellCheck
        uses: bewuethr/shellcheck-action@v2

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.1

      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15.6'
      - run: go version
      - name: Run testing
        run: CGO_ENABLED=0 go test -v $(go list ./pkg/...)

  #TODO: add int/e2e. probably remove above, because

  create-release:
    name: Create Release
    needs: [golangci, shellcheck, unit-test]
    runs-on: ubuntu-latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 #needs for tags

    - name: Tag version
      run: |
        echo "tversion::"

    # - name: Push Atlas Operator to Registry
    #   uses: docker/build-push-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     repository: ${{ secrets.DOCKER_REPO }}
    #     registry: ${{ secrets.DOCKER_REGISTRY }}
    #     tags: ${{ github.ref }}, latest

    - name: Create all-in-one configuration
      uses: ./.github/actions/all-in-one
      with:
        IMAGE_URL: leori/atlas-ci:v4 #${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPO }}:${{ github.ref }}
        version: ${{ github.event.inputs.version }}

    - name: Create configuration package
      run: |
        set -x
        tar czvf ao-all-in-one-${{ github.event.inputs.version }}.tar.gz -C deploy .

    - name: Tag and push
      uses: ./.github/actions/auto-push
      with:
        version: ${{ github.event.inputs.version }}

    - name: Create simple description
      uses: ./.github/actions/changelog
      with:
        version: ${{ github.event.inputs.version }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        body_path: changelog.txt
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./ao-all-in-one-${{ github.event.inputs.version }}.tar.gz
        asset_name: ao-all-in-one-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/tgz

#TODO: create PR deploy/all-in-one.yaml (trigger create branch: release/)