package e2e_test

import (
	// "fmt"
	// "context"
	"os/exec"
	// "runtime"
	// "time"
	// "strings"

	// testutil "github.com/mongodb/atlas-osb/test/util"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/gexec"
	. "github.com/onsi/gomega/gbytes"
	// "github.com/onsi/ginkgo/config"
	// corev1 "k8s.io/api/core/v1"
	// "k8s.io/apimachinery/pkg/api/errors"
	// metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	// "k8s.io/client-go/kubernetes"
	// "k8s.io/client-go/tools/clientcmd"


)

var _ = Describe("Install2", func() {
	It("install type 1. ", func() {
		By("Kubernetes version2\n")
		command := exec.Command("kubectl", "version")
		session, _ := gexec.Start(command, GinkgoWriter, GinkgoWriter)
		GinkgoWriter.Write(session.Out.Contents())
		Eventually(session).Should(Say("Server Version")) //TODO 1.17

		By("Apply All-in-one configuration\n") //TODO why?
		command = exec.Command("kubectl", "apply", "-f", ConfigAll, "-n", "mongodb-atlas-kubernetes-system2" ) //TODO namespace?
		session, _ = gexec.Start(command, GinkgoWriter, GinkgoWriter)
		Eventually(session).Should(Say("mongodb-atlas-kubernetes-system2"))

		By("Sample Project\n")
		command = exec.Command("kubectl", "apply", "-f", ProjectSample, "-n", "mongodb-atlas-kubernetes-system2" ) //TODO namespace?
		session, _ = gexec.Start(command, GinkgoWriter, GinkgoWriter)
		// Eventually(session).Should(Say("atlasproject.atlas.mongodb.com/my-project unchanged"))

		By("Sample Cluster\n")
		command = exec.Command("kubectl", "apply", "-f", ClusterSample, "-n", "mongodb-atlas-kubernetes-system2" ) //TODO namespace?
		session, _ = gexec.Start(command, GinkgoWriter, GinkgoWriter)
		Eventually(session).Should(Say("mongodb-atlas-kubernetes-system2"))


		// with session


		//easy look , hide it?




	})
})


// do not remove it yet!






// func (h *helper) createOperatorNamespaces() error {
// 	log.Info("Creating operator namespaces")
// 	return h.kubectlApplyTemplateWithCleanup("config/e2e/operator_namespaces.yaml", h.testContext)
// }

// func (h *helper) kubectlApplyTemplateWithCleanup(templatePath string, templateParam interface{}) error {
// 	resourceFile, err := h.kubectlApplyTemplate(templatePath, templateParam)
// 	if err != nil {
// 		return err
// 	}

// 	h.addCleanupFunc(h.deleteResources(resourceFile))
// 	return nil
// }




// FIX IT



// func kubectl(args ...string) *gexec.Session {
// 	cmdStarter := NewCommandStarter()
// 	return cmdStarter.Start("kubectl", args...)
// }


// // reporter
// type Reporter interface {
// 	Report(time.Time, *exec.Cmd)
// }

// type DefaultReporter struct{}

// func NewDefaultReporter() *DefaultReporter {
// 	return &DefaultReporter{}
// }

// func (r *DefaultReporter) Report(startTime time.Time, cmd *exec.Cmd) {
// 	const timeFormat = "2006-01-02 15:04:05.00 (MST)"
// 	startColor := ""
// 	endColor := ""
// 	if !config.DefaultReporterConfig.NoColor {
// 		startColor = "\x1b[32m"
// 		endColor = "\x1b[0m"
// 	}

// 	fmt.Fprintf(GinkgoWriter, "\n%s[%s]> %s %s\n", startColor, startTime.UTC().Format(timeFormat), strings.Join(cmd.Args, " "), endColor)
// }

// // command
// type CommandStarter struct {
// 	reporter Reporter
// }

// func NewCommandStarter() *CommandStarter {
// 	return &CommandStarter{
// 		reporter: NewDefaultReporter(),
// 	}
// }

// func NewCommandStarterWithReporter(reporter Reporter) *CommandStarter {
// 	return &CommandStarter{
// 		reporter: reporter,
// 	}
// }

// func (r *CommandStarter) Start(executable string, args ...string) *gexec.Session {
// 	cmd := exec.Command(executable, args...)
// 	r.reporter.Report(time.Now(), cmd)

// 	sess, err := gexec.Start(CommandInterceptor(cmd), GinkgoWriter, GinkgoWriter)
// 	Expect(err).NotTo(HaveOccurred())

// 	return sess
// }
